import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}
	
	test "Nave vacia y llena con velocidad 0, al propulsarse, queda en 20.000"{
		naveVacia.velocidad(0)
		naveLlena.velocidad(0)
		naveVacia.propulsar()
		naveLlena.propulsar()
		
		assert.equals(20000, naveVacia.velocidad())
		assert.equals(20000, naveLlena.velocidad())
	}

}

describe "Nave de carga radioactiva" {
	const naveLlena = new NaveDeCargaRadioactiva(carga = 5000, velocidad = 10000)

 	test "Transporta 5.000kg, sellados al vacío a 10.000,
		al recibir una amenaza frenan pero su carga sigue siendo la misma."{

		naveLlena.sellarAlVacio()
		naveLlena.velocidad(10000)
		naveLlena.recibirAmenaza()
		
		assert.that(naveLlena.estaSellada())
		assert.equals(0, naveLlena.velocidad())
		assert.equals(5000, naveLlena.carga())
	}
}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

	test "Nave sin pasajeros viajar a 290.000 al propulsarse 
		queda viajando a 300.000"{
		
		naveSinPasajeros.velocidad(290000)
		naveSinPasajeros.propulsar()
		assert.equals(300000, naveSinPasajeros.velocidad())
	}
}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "Esta invisible en reposo y viajando a menos de 10.000" {
		assert.that(naveEnReposo.estaInvisible())
	}

	test "No esta invisible en reposo porque viaja a más de 10.000" {
		naveEnReposo.velocidad(11000)
		assert.notThat(naveEnReposo.estaInvisible())
	}
	
	test "esta invisible en ataque" {
		naveEnAtaque.replegarArmas()
		assert.that(naveEnAtaque.estaInvisible())
	}
		
	test "no esta invisible en ataque" {
		naveEnAtaque.desplegarArmas()
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
		assert.that(naveEnAtaque.armasDesplegadas())
	}
	
}

